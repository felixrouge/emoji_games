<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Tic-Tac-Toe avec rounds et pluie d‚Äô√©mojis</title>
<style>
  html, body {
    margin: 0; padding: 0; height: 100%;
    overflow-x: hidden;
    font-family: Arial, sans-serif;
    background: url('https://wallpapercave.com/wp/wp8984749.jpg') no-repeat center center fixed;
    background-size: cover;
    color: #eee;
  }
  body {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    position: relative;
  }
  h1 {
    margin-top: 30px;
    text-shadow: 2px 2px 6px #000;
  }
  #menu {
    margin-top: 30px;
    background: rgba(0,0,0,0.6);
    padding: 20px 30px;
    border-radius: 12px;
    text-align: center;
    z-index: 10;
  }
  #menu label {
    margin: 0 10px;
    cursor: pointer;
    font-size: 1.2rem;
  }
  #menu input[type=radio] {
    margin-right: 6px;
    cursor: pointer;
  }
  #start-btn {
    margin-top: 20px;
    padding: 12px 30px;
    font-size: 1.3rem;
    border: none;
    border-radius: 10px;
    background: #4caf50;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  #start-btn:hover {
    background: #45a049;
  }
  #game-container {
    display: none;
    flex-direction: column;
    align-items: center;
    margin-top: 30px;
    z-index: 10;
  }
  #game {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
  }
  .cell {
    width: 100px;
    height: 100px;
    background: rgba(255 255 255 / 0.85);
    border: 2px solid #333;
    font-size: 4rem;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    user-select: none;
    transition: background-color 0.3s;
  }
  .cell:hover {
    background-color: rgba(224, 247, 250, 0.9);
  }
  .cell.disabled {
    cursor: default;
    background-color: #ddd;
  }
  #status {
    margin-top: 20px;
    font-size: 1.5rem;
    min-height: 2rem;
    color: #fff;
    text-shadow: 1px 1px 3px #000;
  }
  #scoreboard {
    margin-top: 15px;
    font-size: 1.2rem;
    color: #fff;
    text-shadow: 1px 1px 3px #000;
  }
  #reset-btn {
    margin-top: 25px;
    padding: 12px 30px;
    font-size: 1.2rem;
    border: none;
    background-color: #f44336;
    color: white;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  #reset-btn:hover {
    background-color: #d32f2f;
  }

  /* √âmojis tombants en arri√®re-plan uniquement */
  .emoji {
    position: fixed;
    top: -50px;
    font-size: 2em;
    user-select: none;
    pointer-events: none;
    animation-name: fall;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    z-index: 1;
  }
  @keyframes fall {
    0% {
      transform: translateY(0) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(110vh) rotate(360deg);
      opacity: 0;
    }
  }
</style>
</head>
<body>

<h1>Tic-Tac-Toe ‚ùå‚≠ï</h1>

<div id="menu">
  <p>Choisissez le nombre de rounds :</p>
  <label><input type="radio" name="rounds" value="1" checked> 1 round</label>
  <label><input type="radio" name="rounds" value="3"> 3 rounds</label>
  <label><input type="radio" name="rounds" value="5"> 5 rounds</label>
  <label><input type="radio" name="rounds" value="7"> 7 rounds</label>
  <label><input type="radio" name="rounds" value="9"> 9 rounds</label>
  <label><input type="radio" name="rounds" value="15"> 15 rounds</label>
  <br />
  <button id="start-btn">Commencer</button>
</div>

<div id="game-container">
  <div id="game"></div>
  <div id="status"></div>
  <div id="scoreboard"></div>
  <button id="reset-btn">Recommencer</button>
</div>

<script>
  const game = document.getElementById('game');
  const status = document.getElementById('status');
  const scoreboard = document.getElementById('scoreboard');
  const resetBtn = document.getElementById('reset-btn');
  const startBtn = document.getElementById('start-btn');
  const menu = document.getElementById('menu');
  const gameContainer = document.getElementById('game-container');

  const PLAYER_EMOJIS = ['‚ùå', '‚≠ï'];
  let board = [];
  let currentPlayer = 0; // 0 = ‚ùå, 1 = ‚≠ï
  let gameOver = false;

  let roundsToPlay = 1;
  let currentRound = 1;
  let scores = [0,0];

  function createBoard() {
    game.innerHTML = '';
    board = Array(9).fill(null);
    for(let i=0; i<9; i++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      cell.dataset.index = i;
      cell.addEventListener('click', onCellClick);
      game.appendChild(cell);
    }
  }

  function onCellClick(e) {
    if (gameOver) return;
    const index = e.target.dataset.index;
    if (board[index] !== null) return;

    board[index] = PLAYER_EMOJIS[currentPlayer];
    e.target.textContent = PLAYER_EMOJIS[currentPlayer];

    if (checkWin()) {
      scores[currentPlayer]++;
      updateScoreboard();
      status.textContent = `Joueur ${PLAYER_EMOJIS[currentPlayer]} a gagn√© le round ${currentRound} ! üéâ`;
      gameOver = true;
      if (currentRound >= roundsToPlay) {
        setTimeout(() => endGame(), 2000);
      } else {
        setTimeout(() => nextRound(), 2000);
      }
      return;
    }

    if (board.every(cell => cell !== null)) {
      status.textContent = `Match nul au round ${currentRound} ! ü§ù`;
      gameOver = true;
      if (currentRound >= roundsToPlay) {
        setTimeout(() => endGame(), 2000);
      } else {
        setTimeout(() => nextRound(), 2000);
      }
      return;
    }

    currentPlayer = 1 - currentPlayer;
    status.textContent = `Joueur ${PLAYER_EMOJIS[currentPlayer]} √† jouer (Round ${currentRound}/${roundsToPlay})`;
  }

  function checkWin() {
    const winPatterns = [
      [0,1,2],[3,4,5],[6,7,8],
      [0,3,6],[1,4,7],[2,5,8],
      [0,4,8],[2,4,6]
    ];
    return winPatterns.some(pattern => 
      pattern.every(index => board[index] === PLAYER_EMOJIS[currentPlayer])
    );
  }

  function updateScoreboard() {
    scoreboard.textContent = `Score : ‚ùå ${scores[0]} ‚Äì ‚≠ï ${scores[1]}`;
  }

  function nextRound() {
    currentRound++;
    gameOver = false;
    currentPlayer = currentRound % 2 === 1 ? 0 : 1; // alterner qui commence
    status.textContent = `Joueur ${PLAYER_EMOJIS[currentPlayer]} commence le round ${currentRound}`;
    createBoard();
  }

  function endGame() {
    gameOver = true;
    let winner;
    if (scores[0] > scores[1]) winner = '‚ùå';
    else if (scores[1] > scores[0]) winner = '‚≠ï';
    else winner = null;

    if (winner) {
      status.textContent = `Partie termin√©e ! Le joueur ${winner} a gagn√© la partie ! üéâ`;
    } else {
      status.textContent = "Partie termin√©e ! Match nul ! ü§ù";
    }
  }

  resetBtn.addEventListener('click', () => {
    currentRound = 1;
    scores = [0,0];
    gameOver = false;
    currentPlayer = 0;
    updateScoreboard();
    status.textContent = `Joueur ${PLAYER_EMOJIS[currentPlayer]} commence le round ${currentRound}`;
    createBoard();
  });

  startBtn.addEventListener('click', () => {
    const selected = document.querySelector('input[name="rounds"]:checked');
    roundsToPlay = selected ? parseInt(selected.value) : 1;
    currentRound = 1;
    scores = [0,0];
    gameOver = false;
    currentPlayer = 0;
    menu.style.display = 'none';
    gameContainer.style.display = 'flex';
    updateScoreboard();
    status.textContent = `Joueur ${PLAYER_EMOJIS[currentPlayer]} commence le round ${currentRound}`;
    createBoard();
  });

  // √âmojis qui tombent en arri√®re-plan uniquement
  const emojis = ['‚ùå', '‚≠ï'];
  function createEmoji() {
    const emoji = document.createElement('div');
    emoji.className = 'emoji';
    emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
    // Pour √©viter la zone de la grille/menu, on limite la zone horizontale √† 10% - 90% de la largeur
    const margin = window.innerWidth * 0.1;
    emoji.style.left = (margin + Math.random() * (window.innerWidth - 2*margin)) + 'px';
    emoji.style.animationDuration = (5 + Math.random() * 7) + 's';
    emoji.style.fontSize = (20 + Math.random() * 30) + 'px';
    emoji.style.opacity = 0.7 + Math.random() * 0.3;
    emoji.style.zIndex = '1';
    document.body.appendChild(emoji);
    setTimeout(() => {
      emoji.remove();
    }, 12000);
  }
  setInterval(createEmoji, 300);
</script>

</body>
</html>
